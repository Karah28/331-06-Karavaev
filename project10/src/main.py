import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from database import DatabaseManager
from discount_calculator import DiscountCalculator
from styles import AppStyles
from datetime import datetime
import csv

class PartnerManagementApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏")
        self.root.geometry("1400x900")
        self.root.configure(bg=AppStyles.COLORS['background'])
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            self.root.iconbitmap(default='icon.ico')
        except:
            pass
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db = DatabaseManager()
        self.discount_calc = DiscountCalculator()
        
        self.setup_ui()
        self.load_partners()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        style = ttk.Style()
        AppStyles.configure_ttk_styles(style)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        title_frame = ttk.Frame(self.root)
        title_frame.pack(fill=tk.X, padx=10, pady=(10, 0))
        
        title_label = ttk.Label(title_frame, 
                               text="üè¢ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏", 
                               font=AppStyles.FONTS['title'])
        title_label.pack(pady=10)

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", command=self.import_data)
        file_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", command=self.export_pdf)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        edit_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ü—Ä–∞–≤–∫–∞", menu=edit_menu)
        edit_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞", command=self.add_partner_dialog)
        edit_menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞", command=self.edit_partner_dialog)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü–∞—Ä—Ç–Ω–µ—Ä—ã"
        self.partners_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.partners_frame, text="–ü–∞—Ä—Ç–Ω–µ—Ä—ã")
        self.setup_partners_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–£—á–µ—Ç –ø—Ä–æ–¥–∞–∂"
        self.sales_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.sales_frame, text="–£—á–µ—Ç –ø—Ä–æ–¥–∞–∂")
        self.setup_sales_tab()
        
    def setup_partners_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"""
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        buttons_frame = ttk.Frame(self.partners_frame)
        buttons_frame.grid(row=0, column=0, pady=10, sticky="w")
        
        ttk.Button(buttons_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞", 
                  command=self.add_partner_dialog, 
                  style='Success.TButton').grid(row=0, column=0, padx=5)
        ttk.Button(buttons_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                  command=self.edit_partner_dialog, 
                  style='Warning.TButton').grid(row=0, column=1, padx=5)
        ttk.Button(buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.load_partners).grid(row=0, column=2, padx=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        columns = ('ID', '–¢–∏–ø', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–î–∏—Ä–µ–∫—Ç–æ—Ä', 'Email', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ê–¥—Ä–µ—Å', '–†–µ–π—Ç–∏–Ω–≥', '–°–∫–∏–¥–∫–∞')
        self.partners_tree = ttk.Treeview(self.partners_frame, columns=columns, show='headings')
        
        for col in columns:
            self.partners_tree.heading(col, text=col)
            if col == 'ID':
                self.partners_tree.column(col, width=50)
            elif col in ['–¢–∏–ø', '–†–µ–π—Ç–∏–Ω–≥', '–°–∫–∏–¥–∫–∞']:
                self.partners_tree.column(col, width=80)
            elif col in ['Email', '–¢–µ–ª–µ—Ñ–æ–Ω']:
                self.partners_tree.column(col, width=120)
            else:
                self.partners_tree.column(col, width=150)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        scrollbar = ttk.Scrollbar(self.partners_frame, orient=tk.VERTICAL, command=self.partners_tree.yview)
        self.partners_tree.configure(yscrollcommand=scrollbar.set)
        
        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
        self.partners_tree.grid(row=1, column=0, sticky='nsew')
        scrollbar.grid(row=1, column=1, sticky='ns')

        self.partners_frame.rowconfigure(1, weight=1)
        self.partners_frame.columnconfigure(0, weight=1)
        
    def setup_sales_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —É—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂"""
        # –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
        form_frame = ttk.LabelFrame(self.sales_frame, text="üìä –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É")
        form_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # –ü–∞—Ä—Ç–Ω–µ—Ä
        ttk.Label(form_frame, text="–ü–∞—Ä—Ç–Ω–µ—Ä:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.partner_var = tk.StringVar()
        self.partner_combo = ttk.Combobox(form_frame, textvariable=self.partner_var, state="readonly")
        self.partner_combo.grid(row=0, column=1, sticky=tk.W+tk.E, padx=5, pady=5)
        
        # –ü—Ä–æ–¥—É–∫—Ç
        ttk.Label(form_frame, text="–ü—Ä–æ–¥—É–∫—Ç:").grid(row=0, column=2, sticky=tk.W, padx=5, pady=5)
        self.product_var = tk.StringVar()
        self.product_combo = ttk.Combobox(form_frame, textvariable=self.product_var, state="readonly")
        self.product_combo.grid(row=0, column=3, sticky=tk.W+tk.E, padx=5, pady=5)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        ttk.Label(form_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        self.quantity_var = tk.StringVar()
        ttk.Entry(form_frame, textvariable=self.quantity_var).grid(row=1, column=1, sticky=tk.W+tk.E, padx=5, pady=5)
        
        # –î–∞—Ç–∞
        ttk.Label(form_frame, text="–î–∞—Ç–∞:").grid(row=1, column=2, sticky=tk.W, padx=5, pady=5)
        self.date_var = tk.StringVar(value=datetime.now().strftime("%Y-%m-%d"))
        ttk.Entry(form_frame, textvariable=self.date_var).grid(row=1, column=3, sticky=tk.W+tk.E, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        ttk.Button(form_frame, text="üíæ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É", 
                  command=self.add_sale, 
                  style='Success.TButton').grid(row=2, column=0, columnspan=4, pady=10)
        
        form_frame.columnconfigure(1, weight=1)
        form_frame.columnconfigure(3, weight=1)
        
        self.load_combo_data()
        
    def load_combo_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–æ–≤"""
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        partners = self.db.get_all_partners()
        partner_list = [f"{p[0]} - {p[2]}" for p in partners]
        self.partner_combo['values'] = partner_list
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        products = self.db.get_products()
        product_list = [f"{p[0]} - {p[1]} ({p[3]} —Ä—É–±.)" for p in products]
        self.product_combo['values'] = product_list
        
    def load_partners(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.partners_tree.get_children():
            self.partners_tree.delete(item)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        partners = self.db.get_all_partners()
        for partner in partners:
            partner_id = partner[0]
            total_sales = self.db.get_partner_sales_total(partner_id)
            discount = self.discount_calc.calculate_discount(total_sales)
            
            # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
            self.partners_tree.insert('', tk.END, values=(*partner, f"{discount}%"))
    
    def add_partner_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
        dialog = PartnerDialog(self.root, self.db, title="–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
        if dialog.result:
            self.load_partners()
            self.load_combo_data()
    
    def edit_partner_dialog(self):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
        selection = self.partners_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        item = self.partners_tree.item(selection[0])
        partner_data = item['values']
        partner_id = partner_data[0]
        
        dialog = PartnerDialog(self.root, self.db, title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞", 
                             partner_id=partner_id, partner_data=partner_data)
        if dialog.result:
            self.load_partners()
            self.load_combo_data()
    
    def add_sale(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
        try:
            partner_info = self.partner_var.get()
            product_info = self.product_var.get()
            quantity = int(self.quantity_var.get())
            sale_date = self.date_var.get()
            
            if not all([partner_info, product_info, quantity, sale_date]):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return
            
            partner_id = int(partner_info.split(' - ')[0])
            product_id = int(product_info.split(' - ')[0])
            
            self.db.add_sale(partner_id, product_id, quantity, sale_date)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ–¥–∞–∂–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            
            # –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
            self.quantity_var.set("")
            self.date_var.set(datetime.now().strftime("%Y-%m-%d"))
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å–∫–∏–¥–æ–∫
            self.load_partners()
            
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏: {str(e)}")
    
    def import_data(self):
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    reader = csv.DictReader(file)
                    imported_count = 0
                    
                    for row in reader:
                        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É CSV: –¢–∏–ø,–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ,–î–∏—Ä–µ–∫—Ç–æ—Ä,Email,–¢–µ–ª–µ—Ñ–æ–Ω,–ê–¥—Ä–µ—Å,–†–µ–π—Ç–∏–Ω–≥
                        type_name = row.get('–¢–∏–ø', '').strip()
                        
                        # –ù–∞–π—Ç–∏ ID —Ç–∏–ø–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
                        types = self.db.get_partner_types()
                        type_id = None
                        for t in types:
                            if t[1] == type_name:
                                type_id = t[0]
                                break
                        
                        if type_id:
                            self.db.add_partner(
                                type_id,
                                row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '').strip(),
                                row.get('–î–∏—Ä–µ–∫—Ç–æ—Ä', '').strip(),
                                row.get('Email', '').strip(),
                                row.get('–¢–µ–ª–µ—Ñ–æ–Ω', '').strip(),
                                row.get('–ê–¥—Ä–µ—Å', '').strip(),
                                int(row.get('–†–µ–π—Ç–∏–Ω–≥', 0))
                            )
                            imported_count += 1
                
                messagebox.showinfo("–ò–º–ø–æ—Ä—Ç", f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –∑–∞–ø–∏—Å–µ–π")
                self.load_partners()
                self.load_combo_data()
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")
    
    def export_pdf(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                partners = self.db.get_all_partners()
                with open(file_path, 'w', encoding='utf-8') as file:
                    file.write("–û–¢–ß–ï–¢ –ü–û –ü–ê–†–¢–ù–ï–†–ê–ú\n")
                    file.write("=" * 50 + "\n\n")
                    
                    for partner in partners:
                        partner_id = partner[0]
                        total_sales = self.db.get_partner_sales_total(partner_id)
                        discount = self.discount_calc.calculate_discount(total_sales)
                        
                        file.write(f"–¢–∏–ø: {partner[1]}\n")
                        file.write(f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {partner[2]}\n")
                        file.write(f"–î–∏—Ä–µ–∫—Ç–æ—Ä: {partner[3]}\n")
                        file.write(f"Email: {partner[4]}\n")
                        file.write(f"–¢–µ–ª–µ—Ñ–æ–Ω: {partner[5]}\n")
                        file.write(f"–ê–¥—Ä–µ—Å: {partner[6]}\n")
                        file.write(f"–†–µ–π—Ç–∏–Ω–≥: {partner[7]}\n")
                        file.write(f"–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {total_sales:.2f} —Ä—É–±.\n")
                        file.write(f"–°–∫–∏–¥–∫–∞: {discount}%\n")
                        file.write("-" * 30 + "\n\n")
                
                messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")


class PartnerDialog:
    def __init__(self, parent, db, title="–ü–∞—Ä—Ç–Ω–µ—Ä", partner_id=None, partner_data=None):
        self.result = False
        self.db = db
        self.partner_id = partner_id
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.dialog = tk.Toplevel(parent)
        self.dialog.title(title)
        self.dialog.geometry("400x500")
        self.dialog.resizable(False, False)
        self.dialog.grab_set()  # –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å
        
        self.setup_form()
        
        if partner_data:
            self.fill_form(partner_data)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.dialog.transient(parent)
        self.dialog.geometry("+%d+%d" % (parent.winfo_rootx() + 50, parent.winfo_rooty() + 50))
        
    def setup_form(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã"""
        main_frame = ttk.Frame(self.dialog)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # –¢–∏–ø –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        ttk.Label(main_frame, text="–¢–∏–ø –ø–∞—Ä—Ç–Ω–µ—Ä–∞:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.type_var = tk.StringVar()
        self.type_combo = ttk.Combobox(main_frame, textvariable=self.type_var, state="readonly")
        self.type_combo.grid(row=0, column=1, sticky=tk.W+tk.E, pady=5)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤
        types = self.db.get_partner_types()
        self.type_combo['values'] = [t[1] for t in types]
        
        # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        ttk.Label(main_frame, text="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.name_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.name_var).grid(row=1, column=1, sticky=tk.W+tk.E, pady=5)
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä
        ttk.Label(main_frame, text="–î–∏—Ä–µ–∫—Ç–æ—Ä:").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.director_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.director_var).grid(row=2, column=1, sticky=tk.W+tk.E, pady=5)
        
        # Email
        ttk.Label(main_frame, text="Email:").grid(row=3, column=0, sticky=tk.W, pady=5)
        self.email_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.email_var).grid(row=3, column=1, sticky=tk.W+tk.E, pady=5)
        
        # –¢–µ–ª–µ—Ñ–æ–Ω
        ttk.Label(main_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω:").grid(row=4, column=0, sticky=tk.W, pady=5)
        self.phone_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.phone_var).grid(row=4, column=1, sticky=tk.W+tk.E, pady=5)
        
        # –ê–¥—Ä–µ—Å
        ttk.Label(main_frame, text="–ê–¥—Ä–µ—Å:").grid(row=5, column=0, sticky=tk.W, pady=5)
        self.address_var = tk.StringVar()
        address_entry = tk.Text(main_frame, height=3, width=30)
        address_entry.grid(row=5, column=1, sticky=tk.W+tk.E, pady=5)
        self.address_text = address_entry
        
        # –†–µ–π—Ç–∏–Ω–≥
        ttk.Label(main_frame, text="–†–µ–π—Ç–∏–Ω–≥:").grid(row=6, column=0, sticky=tk.W, pady=5)
        self.rating_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.rating_var).grid(row=6, column=1, sticky=tk.W+tk.E, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.grid(row=7, column=0, columnspan=2, pady=20)
        
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                  command=self.save, 
                  style='Success.TButton').pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", 
                  command=self.cancel, 
                  style='Danger.TButton').pack(side=tk.LEFT, padx=5)
        
        main_frame.columnconfigure(1, weight=1)
        
    def fill_form(self, partner_data):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
        self.type_var.set(partner_data[1])  # –¢–∏–ø
        self.name_var.set(partner_data[2])  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        self.director_var.set(partner_data[3])  # –î–∏—Ä–µ–∫—Ç–æ—Ä
        self.email_var.set(partner_data[4])  # Email
        self.phone_var.set(partner_data[5])  # –¢–µ–ª–µ—Ñ–æ–Ω
        self.address_text.insert('1.0', partner_data[6])  # –ê–¥—Ä–µ—Å
        self.rating_var.set(str(partner_data[7]))  # –†–µ–π—Ç–∏–Ω–≥
        
    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–∏–ø–∞
            type_name = self.type_var.get()
            types = self.db.get_partner_types()
            type_id = None
            for t in types:
                if t[1] == type_name:
                    type_id = t[0]
                    break
            
            if not type_id:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
                return
            
            name = self.name_var.get().strip()
            director = self.director_var.get().strip()
            email = self.email_var.get().strip()
            phone = self.phone_var.get().strip()
            address = self.address_text.get('1.0', tk.END).strip()
            rating = int(self.rating_var.get() or 0)
            
            if not name:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
                return
            
            if self.partner_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.db.update_partner(
                    self.partner_id,
                    name=name,
                    director=director,
                    email=email,
                    phone=phone,
                    legal_address=address,
                    rating=rating
                )
            else:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                self.db.add_partner(type_id, name, director, email, phone, address, rating)
            
            self.result = True
            self.dialog.destroy()
            
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
    
    def cancel(self):
        """–û—Ç–º–µ–Ω–∞"""
        self.dialog.destroy()


if __name__ == "__main__":
    root = tk.Tk()
    app = PartnerManagementApp(root)
    root.mainloop()
